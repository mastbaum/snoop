#!/usr/bin/env python

import os
import sys
import time
import signal

from snoop.processor import ProcessorBlock

# timestamp by minute
ts_now = lambda: int(time.time()/60)

def sigusr1_handler(signum, frame):
    print 'Caught signal %s, reloading...' % signum
    if processor_block is not None:
        reload(config)
        try:
            processor_block.load_processors(config.processor_paths, config.processor_kwargs)
        except NameError:
            processor_block.load_processors(config.processor_paths)
    return

def write_results(results):
    for result in results:
        if result.ready():
            config.writer.write(result.get(), timestamp=ts_now())
            results.remove(result)

def main(processor_block):
    events = config.reader.read()

    results = []
    start_time = time.time()
    sample_count = 0

    # event loop
    signal.signal(signal.SIGUSR1, sigusr1_handler)
    while True:
        # write available sample results
        write_results(results)

        # sample with specified period
        if time.time() - start_time > sample_count * config.sample_period:
            sample_count += 1
            result = processor_block.sample()
            results.append(result)

        # process an event
        try:
            event = events.next()
            processor_block.event(event)
        except StopIteration:
            #result = processor_block.sample()
            #results.append(result)
            #break
            pass

    # wait for any remaining samples to complete
    while len(results) > 0:
        write_results(results)
        time.sleep(0.1)

if __name__ == '__main__':
    import optparse
    parser = optparse.OptionParser('%prog <config file path> <options>')
    parser.add_option('-d', '--daemon', action='store_true', dest='daemon', default=False)
    options, args = parser.parse_args()

    config_path = args[0] if len(args) > 0 else './config.py'
    print 'Loading configuration from', config_path
    dir, f = os.path.split(config_path)
    sys.path.insert(0, os.path.abspath(dir))
    config = __import__(os.path.splitext(f)[0])

    # build the processor block
    try:
        processor_block = ProcessorBlock(config.processor_paths, kwargs=config.processor_kwargs)
    except NameError:
        processor_block = ProcessorBlock(config.processor_paths)

    if options.daemon:
        import daemon
        import lockfile

        context = daemon.DaemonContext(
            working_directory='/home/mastbaum/snoop/', #/var/lib/snoop',
            umask=0o002,
            pidfile=lockfile.FileLock('/home/mastbaum/snoop/snoop.pid'),
            stdout=sys.stdout,
            stderr=sys.stderr,
        )

        context.signal_map = {
            signal.SIGTERM: 'terminate',
            signal.SIGHUP: 'terminate',
            signal.SIGUSR1: sigusr1_handler,
        }

        with context:
            main(processor_block)

    else:
        main(processor_block)

